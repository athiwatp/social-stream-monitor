{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Template to set up Kinesis stream, Lambda functions, SNS Topic",

    "Parameters" : {
        "SocketioServerEndpoint" : {
            "Type" : "String",
            "Description" : "Name of socket.io server endpoint."
        }
    },

    "Resources" : {
        "streamprocessingclient" : {
            "Type" : "AWS::IAM::User"
        },

        "ClientPolicy" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "StreamProcessingClientPolicy",
                "PolicyDocument" : {
                    "Statement" : [{
                        "Effect" : "Allow",
                        "Action" : [
                            "kinesis:Put*"
                        ],
                        "Resource" : { "Fn::Join" : [ "", ["arn:aws:kinesis:", {"Ref" : "AWS::Region"} , ":", {"Ref" : "AWS::AccountId"}, ":stream/", {"Ref" : "EventStream"}]]}
                    },
                    {
                        "Effect" : "Allow",
                        "Action" : [
                            "sns:Subscribe"
                        ],
                        "Resource" : "arn:aws:sns:*:*:*"
                    }
                    ]
                },
                "Users" : [{ "Ref" : "streamprocessingclient" }]
            }
        },

        "ClientKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : { "Ref" : "streamprocessingclient" }
            }
        },

        "EventStream" : {
            "Type" : "AWS::Kinesis::Stream",
            "Properties" : {
                "ShardCount" : 1
            }
        },
        
        "EventDataSNS" : {
          "Type" : "AWS::SNS::Topic",
          "Properties":{
            "Subscription":[
              {"Endpoint":{ "Ref" : "SocketioServerEndpoint" },"Protocol":"http"}
            ],
            "TopicName" : "SocketServerTopic"
          }
        },

        "SNSEventProcessor" : {
            "Type" : "AWS::Lambda::Function",
            "Properties" : {
                "Description" : "Stream Processing SNS Event Processor",
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role" : {"Fn::GetAtt" : ["EventProcessorExecutionRole", "Arn"] },
                "Timeout" : 10,
                "Runtime" : "nodejs",
                "Code" : {
                  "ZipFile":  { "Fn::Join": ["", [
                    "var aws = require('aws-sdk');",
                    "var sns = new aws.SNS();",
                    "exports.handler = function(event, context) {",
                    "    console.log('Received event:', JSON.stringify(event, null, 2));",
                    "    var stackName = context.functionName.split('-')[0];",
                    "    var putItems = [];",
                    "    event.Records.forEach(function(record) {",
                    "        payload = new Buffer(record.kinesis.data, 'base64').toString('ascii');",
                    "        console.log('Decoded payload:', payload);",
                    "        var tweet = JSON.parse(payload);",
                    "        console.log('User:', tweet.user.name);",
                    "        console.log('Timestamp:', tweet.created_at);",
                    "        req = {",
                    "            username:tweet.user.name,",
                    "            profile_image_url:tweet.user.profile_image_url,",
                    "            timestamp_ms:tweet.timestamp_ms,",
                    "            text:tweet.text,",
                    "            coordinates:tweet.coordinates",
                    "        };",
                    "        sns.publish({",
                    "            Message: JSON.stringify(req),",
                    "            Subject: 'message title',",
                    "            TopicArn: '",{"Ref": "EventDataSNS"},"'",
                    "            }, function(err, data) {",
                    "                if (err) {",
                    "                    console.log(err.stack);",
                    "                    context.done(err, 'Brians Function Finished with Errors!');",
                    "                    return;",
                    "                }",
                    "                console.log(data);",
                    "                context.done(null, 'push sent');",
                    "            });",
                    "    });",
                    "};"
                  ]]}
                }
            }
        },

        "EventProcessorExecutionRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [ {
                        "Effect" : "Allow",
                        "Principal" : {
                            "Service" : [ "lambda.amazonaws.com" ]
                        },
                        "Action" : [ "sts:AssumeRole" ]
                    } ]
                },
                "Path" : "/",
                "Policies" : [ {
                    "PolicyName" : "EventProcessorExecutionPolicy",
                    "PolicyDocument" : {
                        "Version" : "2012-10-17",
                        "Statement" : [
                            {
                                "Effect" : "Allow",
                                "Action" : [
                                    "logs:*"
                                ],
                                "Resource" : "arn:aws:logs:*:*:*"
                            },
                            {
                                "Effect" : "Allow",
                                "Action" : [
                                    "sns:Publish"
                                ],
                                "Resource" : "arn:aws:sns:*:*:*"
                            }
                        ]
                    }
                } ],
                "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole"]
            }
        },

        "MapLambdaEventSource": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "FunctionName": {"Ref": "SNSEventProcessor"},
                "StartingPosition": "TRIM_HORIZON",
                "BatchSize": 25,
                "EventSourceArn": {
                    "Fn::Join" : [ "", ["arn:aws:kinesis:", {"Ref" : "AWS::Region"} , ":", {"Ref" : "AWS::AccountId"}, ":stream/", {"Ref" : "EventStream"}]]
                }
            }
        }
    },

    "Outputs" : {
        "AccessKeyId" : {
            "Value" : { "Ref" : "ClientKeys" },
            "Description" : "AWS Access Key Id of stream processing client user"
        },
        "SecretAccessKey" : {
            "Value" : { "Fn::GetAtt" : ["ClientKeys", "SecretAccessKey"]},
            "Description" : "AWS Secret Key of stream processing client user"
        },
        "KinesisStream" : {
            "Value" : { "Ref" : "EventStream" },
            "Description" : "The Kinesis stream used for ingestion."
        },
        "Region" : {
            "Value" : { "Ref" : "AWS::Region" },
            "Description" : "The region this template was launched in."
        },
        "SNStopic" : {
            "Value" : { "Ref" : "EventDataSNS" },
            "Description" : "SNS http Topic for ingestion."
        }
    }
}
